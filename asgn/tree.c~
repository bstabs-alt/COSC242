#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "tree.h"
#include "mylib.h"

/* node black = true return 1, otherwise return 0*/
#define IS_BLACK(x) ((NULL == (x)) || (BLACK == (x) -> colour))
/* node red = true return 1, otherwise return 0*/
#define IS_RED(x) ((NULL !=(x)) && (RED == (x) -> colour))

/*static datafield to hold tree type*/
static tree_t type;

/*struct of treenode.
  key: data for node
  left: points to left subtree.
  right: points to right subtree.
  colour: node colour.
  frequency: holds frequency of same piece of data
*/
struct treenode{
    char *key;
    tree left;
    tree right;
    tree_colour colour;
    int frequency;
};

/* right_rotate rotates the node right.
   @PARAM node that gets rotated.
   @RETURN rotated node.
*/
static tree right_rotate(tree b){
    tree temp = b->left;
    b->left = temp->right;
    temp->right = b;
    return temp;
}

/* right_rotate rotates the node right.
   @PARAM node that gets rotated.
   @RETURN rotated node.
*/
static tree left_rotate(tree b){
    tree temp = b->right;
    b->right = temp->left;
    temp->left = b;
    return temp;
}

/*
 */
tree tree_fix (tree b){
    if (IS_RED(b->left) && IS_RED(b->left->left)){
        if (IS_RED(b->right)){
            b->colour = RED;
            b->left->colour = BLACK;
            b->right->colour = BLACK;
        } else {
            b = right_rotate(b);
            
            b->colour = BLACK;
            b->right->colour = RED;
        }
    } else if (IS_RED(b->left) && IS_RED(b->left->right)){
        if (IS_RED(b->right)){
            b->colour = RED;
            b->left->colour = BLACK;
            b->right->colour = BLACK;
        } else {
            b->left = left_rotate(b->left);
            b = right_rotate(b);
            
            b->colour = BLACK;
            b->right->colour = RED;
        }
    } else if (IS_RED(b->right) && IS_RED(b->right->left)){
        if (IS_RED(b->left)){
            b->colour = RED;
            b->left->colour = BLACK;
            b->right->colour = BLACK;
        } else {
            b->right = right_rotate(b->right);
            b = left_rotate(b);
            
            b->colour = BLACK;
            b->left->colour = RED;
        }
    } else if (IS_RED(b->right) && IS_RED(b->right->right)){
        if (IS_RED(b->left)){
            b->colour = RED;
            b->left->colour = BLACK;
            b->right->colour = BLACK;
        } else {
            b = left_rotate(b);
            
            b->colour = BLACK;
            b->left->colour = RED;
        }
    }
    return b;
}

/* tree_new creates new tree.
   intialises key, right, left, colour, type, and frequency.
   @PARAM tree type.
   @RETURN the first node of the tree.
*/
tree tree_new(tree_t t){
    tree b = emalloc(sizeof (struct treenode));
    b->key = NULL;
    b->right = NULL;
    b->left = NULL;
    b->colour = RED;
    type = t;
    b->frequency = 0;
    
    return b;
}

/*tree_free frees all memory assoicated with the tree
  @PARAM tree type.
  @RETURN the freed tree.
 */
tree tree_free(tree b){
    if(b == NULL){
        return b;
    }
    free(b->key);
    tree_free(b->left);
    tree_free(b->right);
    free(b);
    
    return b;
}

/* creates a tree if there is not one.
   if the key is null then will allocate memory,
   and insert the string.
   traverses the tree to find appropiate node,
   to insert the string.
   increases frequency when there is a double up.
   @PARAM current node, string wanted to be added.
   @RETURN the tree with the added string.
 */
tree tree_insert(tree b, char *str){
    if(b == NULL){
        b = tree_new(type);
    }
    
    if(b->key == NULL){
        b->key = emalloc(strlen(str)+1);
        strcpy(b->key, str);
        b->frequency = 1;
        return b;
    }

    if(strcmp(str, b->key) < 0) {
        b->left = tree_insert(b->left, str);
    } else if(strcmp(str, b->key) > 0){
        b->right = tree_insert(b->right, str);
    } else if(strcmp(str, b->key) == 0){
        b->frequency += 1;
    }
    if(type == RBT){
        b = tree_fix(b);
    }
    return b;
}

/* 
 */
void tree_preorder(tree b, void f(int freq, char *str)){
    if(b == NULL){
        return;
    }
    f(b->frequency, b->key);
    tree_preorder(b->left, f);
    tree_preorder(b->right,f);
}

/* searches for specific string in tree.
   @PARAM current node, string being searched.
   @RETURN integer 1 = found, 0 = not found.
 */
int tree_search(tree b, char *str){
    if (b == NULL) {
        return 0;
    }
    if (strcmp(b->key, str) == 0) {
        return 1;
    } else if (strcmp(b->key, str) < 0){
        return tree_search(b->right, str);
    } else {
        return tree_search(b->left, str);
    }
}

/* finds the longest tree route and records,
   the number of nodes that make it up
   @PARAM current node in route.
   @RETURN depth length as an integer.
 */
int tree_depth(tree b){
    if (b == NULL){
        return 0;
    } else {
        int l=0,r=0;

        if(b->left !=NULL){
            l += 1 + tree_depth(b->left);
        }
        if(b->right !=NULL){
            r += 1 + tree_depth(b->right);
        }
        if(l >= r){
            return l;
        } else {
            return r;
        }
    }
}

/* flips the colour of the root node to black.
   @PARAM root node.
   @RETURN black root node.
 */
tree tree_colour_flip(tree b){
    b->colour = BLACK;
    return b;
}

/*
 */
static void tree_output_dot_aux(tree b, FILE *out) {
    if(b->key != NULL) {
        fprintf(out, "\"%s\"[label=\"{<f0>%s:%d|{<f1>|<f2>}}\"color=%s];\n",
                b->key, b->key, b->frequency,
                (RBT == type && RED == b->colour) ? "red":"black");
    }
    if(b->left != NULL) {
        tree_output_dot_aux(b->left, out);
        fprintf(out, "\"%s\":f1 -> \"%s\":f0;\n", b->key, b->left->key);
    }
    if(b->right != NULL) {
        tree_output_dot_aux(b->right, out);
        fprintf(out, "\"%s\":f2 -> \"%s\":f0;\n", b->key, b->right->key);
    }
}

/*
 */
void tree_output_dot(tree b, FILE *out) {
    fprintf(out, "digraph tree {\nnode [shape = Mrecord, penwidth = 2];\n");
    tree_output_dot_aux(b, out);
    fprintf(out, "}\n");
}
