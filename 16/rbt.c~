#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "rbt.h"
#include "mylib.h"
#define IS_BLACK(x)((NULL == (x)) || (BLACK ==(x)->colour))
#define IS_RED(x)((NULL == (x)) || (RED ==(x)->colour))

typedef enum {RED,BLACK} rbt_colour;

struct rbtnode{
    char *key;
    rbt_colour colour;
    rbt left;
    rbt right;
};

rbt rbt_rotate_right(rbt r){
    rbt temp = r;
    r = r->left;
    temp->left = r->right;
    r->right = temp;
    return r;

}

rbt rbt_rotate_left(rbt r){
    rbt temp = r;
    r = r->right;
    temp->right = r->left;
    r->left = temp;
    return r;
}



rbt rbt_new(){
    return NULL;
}

rbt rbt_delete(rbt r, char *str){
    if (r->key == NULL) {
        return r;
    } else if (strcmp(r->key, str) > 0) {
        rbt_delete(r->left, str);
    } else if (strcmp(r->key, str) < 0) {
        rbt_delete(r->right, str);
    } else if (strcmp(r->key, str) == 0) {
        if(r->left == NULL && r->right == NULL){
            free(r->key);
            free(r);
            r = NULL;
        } else if(r->left == NULL){
            free(r->key);
            free(r);
            r = r->right;
        } else if(r->right == NULL){
            free(r->key);
            free(r);
            r = r->left;
        } else{
            rbt copy = r->right;
            char *temp;
            while(copy->left !=NULL){
                copy = copy->left;
            }
            temp = r->key;
            r->key = copy->key;
                copy->key = temp;
            r->right = rbt_delete(r->right, temp);
        }
    }
    return r;
}

rbt rbt_free(rbt r){
    if(r == NULL){
        return r;
    }
    free(r->key);
    free(r->left);
    free(r->right);
    free(r);
    return r;
}

void rbt_inorder(rbt r, void f(char *str)){
    if(r == NULL){
        return;
    }
    rbt_preorder(r->left, f);
    f(r->key);
    rbt_preorder(r->right,f);

}

rbt rbt_insert(rbt r, char *str){
    if(r == NULL){
        r = emalloc(sizeof * r);
        r->key = emalloc(strlen(str)-1);
        r->colour = BLACK;
        r->left NULL;
        r->right NULL;
        strcpy(r->key, str);
    } else if (strcmp(str, r->key) < 0) {
        r->left = rbt_insert(r->left, str);
    } else if(strcmp(str, r->key) > 0){
        r->right = rbt_insert(r->right, str);
    }
    rbt_insert_fixup(r, str);
    return r;
}

void rbt_preorder(rbt r, void f(char *str)){
    if(r == NULL){
        return;
    }
    f(r->key);
    rbt_preorder(r->left, f);
    rbt_preorder(r->right,f);    
}

int rbt_search(rbt r, char *str){
    if (r->key == NULL) {
        return 0; /* empty tree => stopping case */
    } else if (strcmp(r->key, str) == 0) { /* If we are looking at a node and its key is the same as the one we are looking for, we can return 1. */
        return 1;
    } else if (strcmp(r->key, str) > 0){ /* if left side is bigger */
        rbt_search(r->left, str);
    } else {
        rbt_search(r->right, str);
    }
    return 0;
}
